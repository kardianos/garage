// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package comm is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Noop
*/
package comm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Noop struct {
}

func (m *Noop) Reset()                    { *m = Noop{} }
func (m *Noop) String() string            { return proto.CompactTextString(m) }
func (*Noop) ProtoMessage()               {}
func (*Noop) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*Noop)(nil), "comm.Noop")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Garage service

type GarageClient interface {
	Ping(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error)
	Toggle(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error)
	Garage(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Garage_GarageClient, error)
}

type garageClient struct {
	cc *grpc.ClientConn
}

func NewGarageClient(cc *grpc.ClientConn) GarageClient {
	return &garageClient{cc}
}

func (c *garageClient) Ping(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := grpc.Invoke(ctx, "/comm.Garage/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *garageClient) Toggle(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := grpc.Invoke(ctx, "/comm.Garage/Toggle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *garageClient) Garage(ctx context.Context, in *Noop, opts ...grpc.CallOption) (Garage_GarageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Garage_serviceDesc.Streams[0], c.cc, "/comm.Garage/Garage", opts...)
	if err != nil {
		return nil, err
	}
	x := &garageGarageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Garage_GarageClient interface {
	Recv() (*Noop, error)
	grpc.ClientStream
}

type garageGarageClient struct {
	grpc.ClientStream
}

func (x *garageGarageClient) Recv() (*Noop, error) {
	m := new(Noop)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Garage service

type GarageServer interface {
	Ping(context.Context, *Noop) (*Noop, error)
	Toggle(context.Context, *Noop) (*Noop, error)
	Garage(*Noop, Garage_GarageServer) error
}

func RegisterGarageServer(s *grpc.Server, srv GarageServer) {
	s.RegisterService(&_Garage_serviceDesc, srv)
}

func _Garage_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GarageServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Garage/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GarageServer).Ping(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Garage_Toggle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GarageServer).Toggle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Garage/Toggle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GarageServer).Toggle(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Garage_Garage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Noop)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GarageServer).Garage(m, &garageGarageServer{stream})
}

type Garage_GarageServer interface {
	Send(*Noop) error
	grpc.ServerStream
}

type garageGarageServer struct {
	grpc.ServerStream
}

func (x *garageGarageServer) Send(m *Noop) error {
	return x.ServerStream.SendMsg(m)
}

var _Garage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comm.Garage",
	HandlerType: (*GarageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Garage_Ping_Handler,
		},
		{
			MethodName: "Toggle",
			Handler:    _Garage_Toggle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Garage",
			Handler:       _Garage_Garage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 103 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0xce, 0xcf, 0xcd, 0x55, 0x62, 0xe3, 0x62, 0xf1,
	0xcb, 0xcf, 0x2f, 0x30, 0xca, 0xe3, 0x62, 0x73, 0x4f, 0x2c, 0x4a, 0x4c, 0x4f, 0x15, 0x92, 0xe3,
	0x62, 0x09, 0xc8, 0xcc, 0x4b, 0x17, 0xe2, 0xd2, 0x03, 0x29, 0xd0, 0x03, 0xc9, 0x4a, 0x21, 0xb1,
	0x85, 0x14, 0xb8, 0xd8, 0x42, 0xf2, 0xd3, 0xd3, 0x73, 0x52, 0x71, 0xaa, 0x50, 0x82, 0x9b, 0x85,
	0x43, 0x85, 0x01, 0x63, 0x12, 0x1b, 0xd8, 0x11, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa8,
	0x82, 0x26, 0x29, 0x91, 0x00, 0x00, 0x00,
}
